{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0;\csgray\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww26820\viewh12540\viewkind0
\deftab720
\pard\pardeftab720\pardirnatural\qc\partightenfactor0

\f0\b\fs36 \cf2 SSN COLLEGE OF ENGINEERING (Autonomous)\
Affiliated to Anna University\
DEPARTMENT OF CSE\
\
UCS1312 DATA STRUCTURES LAB\
Exercise 1: Searching and Sorting\
\
\pard\pardeftab720\pardirnatural\partightenfactor0
\cf2 REG NO. : 185001083\
NAME : B. LAKSHMI PRIYA\
CLASS : CSE B (SEMESTER 3)\
\
\pard\pardeftab720\pardirnatural\partightenfactor0

\fs28 \cf2 1. PROGRAM NAME: Searching and Sorting\
\
PROGRAM:\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0
\cf2 \CocoaLigature0 #include <stdio.h>\
\
int input(int l[])\
\{\
	int i,n;\
	printf("Enter number of elements in list: ");\
	scanf("%d",&n);\
	for(i=0;i<n;i++)\
	\{\
		printf("\\nEnter element %d: ", i+1);\
		scanf("%d",&l[i]);\
	\}\
	return n;\
\}\
\
void display(int l[],int n)\
\{\
	for(int i=0;i<n;i++)\
	\{\
		printf("\\nElement l[%d]: %d",i,l[i]);\
	\}\
\}\
\
void selsort(int l[],int n)\
\{\
	int i,j,temp,min,minindex;\
	for(i=0;i<n-1;i++)\
	\{\
		min=l[i];\
		minindex=i;\
		for(j=i+1;j<n;j++)\
		\{\
			if (l[j]<min)\
			\{\
				min=l[j];\
				minindex=j;\
			\}\
		\}\
		temp=l[i];\
		l[i]=l[minindex];\
		l[minindex]=temp;\
	\}\
	display(l,n);\
\}\
\
void inssort(int l[],int n)\
\{\
	int i,j,ival,itemp;\
	for(i=1;i<n;i++)\
	\{\
		itemp=i;\
		ival=l[i];\
		for(j=i-1;j>=0;j--)\
		\{\
			if (l[j]>ival)\
				l[j+1]=l[j];\
			else\
				break;\
		\}\
		l[j+1]=ival;\
	\}\
	display(l,n);\
\}	\
\
\
int lsearch(int l[],int n)\
\{\
	int i,element;\
	printf("Enter element to be found: ");\
	scanf("%d",&element);\
	for (i=0;i<n;i++)\
	\{\
		if (l[i]==element)\
			return i;\
	\}\
	return -1;\
\}\
\
int bsearch(int l[],int n)\
\{\
	selsort(l,n);\
	int i,element,p1=0,p2=n-1,mid;\
	printf("\\nEnter element to be found: ");\
	scanf("%d",&element);\
	while (p1<=p2)\
	\{\
		mid=(p1+p2)/2;\
		if (l[mid]>element)\
			p2=mid-1;\
		else if(l[mid]<element)\
			p1=mid+1;\
		else if (l[mid]==element)\
			return mid;\
	\}\
	return -1;\
\}\
\
int main()\
\{\
	int ch,n,index;	\
	int l[20];\
	printf("\\nOptions:\\n1. Linear Search\\n2. Binary Search\\n3. Selection Sort\\n4. Insertion Sort\\n0. Exit\\nEnter option: ");\
	scanf("%d",&ch);\
	if (ch)\
		n=input(l);\
	while(ch)\
	\{\
		switch(ch)\
		\{\
		case 1: index=lsearch(l,n); \
				if (index==-1)\
					printf("Element not found!\\n");\
				else\
					printf("Index of element: %d",index);\
				break;\
		case 2: index=bsearch(l,n); \
				if (index==-1)\
					printf("Element not found!\\n");\
				else\
					printf("Index of element: %d",index); \
				break;\
		case 3: selsort(l,n); \
				break;\
		case 4: inssort(l,n); \
				break;\
		\}\
		printf("\\n\\nOptions:\\n1. Linear Search\\n2. Binary Search\\n3. Selection Sort\\n4. Insertion Sort\\n0. Exit\\nEnter option: ");\
		scanf("%d",&ch);\
		if (ch)\
			n=input(l);\
	\}\
	return 0;\
\}\
\
\
\
OUTPUT:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \cb3 gml15:185001083 cseb15$ gcc ex1.c -o ex1\
gml15:185001083 cseb15$ ./ex1\
\
Options:\
1. Linear Search\
2. Binary Search\
3. Selection Sort\
4. Insertion Sort\
0. Exit\
Enter option: 1\
Enter number of elements in list: 4\
\
Enter element 1: 2\
\
Enter element 2: 6\
\
Enter element 3: 4\
\
Enter element 4: 8\
Enter element to be found: 6\
Index of element: 1\
\
Options:\
1. Linear Search\
2. Binary Search\
3. Selection Sort\
4. Insertion Sort\
0. Exit\
Enter option: 1\
Enter number of elements in list: 2\
\
Enter element 1: 6\
\
Enter element 2: 7\
Enter element to be found: 1\
Element not found!\
\
\
Options:\
1. Linear Search\
2. Binary Search\
3. Selection Sort\
4. Insertion Sort\
0. Exit\
Enter option: 2\
Enter number of elements in list: 3\
\
Enter element 1: 3\
\
Enter element 2: 6\
\
Enter element 3: 8\
\
Element l[0]: 3\
Element l[1]: 6\
Element l[2]: 8\
Enter element to be found: 9\
Element not found!\
\
\
Options:\
1. Linear Search\
2. Binary Search\
3. Selection Sort\
4. Insertion Sort\
0. Exit\
Enter option: 2\
Enter number of elements in list: 8\
\
Enter element 1: 8\
\
Enter element 2: 7\
\
Enter element 3: 6\
\
Enter element 4: 5\
\
Enter element 5: 4\
\
Enter element 6: 3\
\
Enter element 7: 2\
\
Enter element 8: 1\
\
Element l[0]: 1\
Element l[1]: 2\
Element l[2]: 3\
Element l[3]: 4\
Element l[4]: 5\
Element l[5]: 6\
Element l[6]: 7\
Element l[7]: 8\
Enter element to be found: 6\
Index of element: 5\
\
Options:\
1. Linear Search\
2. Binary Search\
3. Selection Sort\
4. Insertion Sort\
0. Exit\
Enter option: 3\
Enter number of elements in list: 5\
\
Enter element 1: 8\
\
Enter element 2: 7\
\
Enter element 3: 6\
\
Enter element 4: 5\
\
Enter element 5: 4\
\
Element l[0]: 4\
Element l[1]: 5\
Element l[2]: 6\
Element l[3]: 7\
Element l[4]: 8\
\
Options:\
1. Linear Search\
2. Binary Search\
3. Selection Sort\
4. Insertion Sort\
0. Exit\
Enter option: 4\
Enter number of elements in list: 4\
\
Enter element 1: 3\
\
Enter element 2: 3\
\
Enter element 3: 1\
\
Enter element 4: 1\
\
Element l[0]: 1\
Element l[1]: 1\
Element l[2]: 3\
Element l[3]: 3\
\
Options:\
1. Linear Search\
2. Binary Search\
3. Selection Sort\
4. Insertion Sort\
0. Exit\
Enter option: 0\cf2 \cb1 \
}